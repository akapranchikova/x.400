name: CI

on:
  push:
    branches: [main]
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build workspace artifacts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml
      - uses: dtolnay/rust-toolchain@stable
      - name: Setup environment
        run: |
          cp .env.example .env || echo "OK"
          node -e "try{require('dotenv').config(); console.log('IPC', process.env.CORE_IPC_PORT);}catch(e){console.log('dotenv not available yet, skipping env log');}"
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('packages/core-service/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Build monorepo (excluding docs)
        run: pnpm build

  lint:
    name: Lint & format checks
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml
      - uses: dtolnay/rust-toolchain@stable
      - name: Setup environment
        run: |
          cp .env.example .env || echo "OK"
          node -e "try{require('dotenv').config(); console.log('IPC', process.env.CORE_IPC_PORT);}catch(e){console.log('dotenv not available yet, skipping env log');}"
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run JS/TS lint
        run: pnpm lint
      - name: Run Rust lint
        run: pnpm --filter @x400/core-service run lint
      - name: Check formatting (Rust)
        run: pnpm --filter @x400/core-service exec cargo fmt --all -- --check

  test:
    name: Unit & integration tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml
      - uses: dtolnay/rust-toolchain@stable
      - name: Setup environment
        run: |
          cp .env.example .env || echo "OK"
          node -e "try{require('dotenv').config(); console.log('IPC', process.env.CORE_IPC_PORT);}catch(e){console.log('dotenv not available yet, skipping env log');}"
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: build project
        run: pnpm build
      - name: Run workspace tests
        run: pnpm test:all

  coverage-ts:
    name: TypeScript coverage
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run TS coverage suite
        run: pnpm test:cov
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ts-coverage-reports
          path: |
            apps/ui-client/coverage
            packages/cli/coverage
            packages/sdk-wrapper/coverage
            packages/shared/coverage
          if-no-files-found: error

  coverage-rust:
    name: Rust coverage
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml
      - uses: dtolnay/rust-toolchain@stable
      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov --locked
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Generate Rust coverage report
        run: pnpm --filter @x400/core-service run coverage
      - name: Upload Rust coverage
        uses: actions/upload-artifact@v4
        with:
          name: rust-coverage
          path: packages/core-service/coverage
          if-no-files-found: error

  mutation:
    name: Mutation testing
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run mutation harness
        run: pnpm test:mut

  fuzz-smoke:
    name: Fuzz smoke tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml
      - uses: dtolnay/rust-toolchain@stable
      - name: Install cargo-fuzz
        run: cargo install cargo-fuzz --locked
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run fuzz smoke
        run: pnpm --filter @x400/core-service run fuzz:smoke
      - name: Upload fuzz artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fuzz-artifacts
          path: packages/core-service/fuzz/artifacts
          if-no-files-found: ignore

  contract-check:
    name: Contract drift check
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Verify OpenAPI contract hash
        run: pnpm contract:check

  e2e:
    name: Playwright end-to-end tests
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml
      - uses: dtolnay/rust-toolchain@stable
      - name: Setup environment
        run: |
          cp .env.example .env || echo "OK"
          node -e "try{require('dotenv').config(); console.log('IPC', process.env.CORE_IPC_PORT);}catch(e){console.log('dotenv not available yet, skipping env log');}"
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Install Playwright browsers (linux)
        if: runner.os == 'Linux'
        run: pnpm exec playwright install --with-deps
      - name: Install Playwright browsers (windows)
        if: runner.os != 'Linux'
        run: pnpm exec playwright install
      - name: Run e2e tests
        run: pnpm e2e
      - name: Upload Playwright report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.os }}
          path: playwright-report
          if-no-files-found: ignore

  e2e-visual-a11y:
    name: Visual & a11y regression
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps
      - name: Run visual regression suite
        run: pnpm e2e:vr
      - name: Run accessibility suite
        run: pnpm e2e:a11y
      - name: Upload Playwright artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-visual-a11y
          path: |
            playwright-report
            apps/ui-client/e2e/__screenshots__
            apps/ui-client/e2e/__snapshots__
          if-no-files-found: ignore

  audit:
    name: Dependency security audit
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml
      - uses: dtolnay/rust-toolchain@stable
      - name: Setup environment
        run: |
          cp .env.example .env || echo "OK"
          node -e "try{require('dotenv').config(); console.log('IPC', process.env.CORE_IPC_PORT);}catch(e){console.log('dotenv not available yet, skipping env log');}"
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Audit Node dependencies
        run: pnpm audit --prod
      - name: Install cargo-audit
        run: cargo install cargo-audit --locked
      - name: Audit Rust dependencies
        run: pnpm --filter @x400/core-service run audit

  docs:
    name: Build documentation site
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml
      - name: Setup environment
        run: |
          cp .env.example .env || echo "OK"
          node -e "try{require('dotenv').config(); console.log('IPC', process.env.CORE_IPC_PORT);}catch(e){console.log('dotenv not available yet, skipping env log');}"
      - name: Install mkdocs tooling
        run: pip install mkdocs mkdocs-material
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Build docs
        run: pnpm --filter @x400/docs run docs:build
      - name: Upload docs artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs-site
          path: packages/docs/site
          if-no-files-found: error
